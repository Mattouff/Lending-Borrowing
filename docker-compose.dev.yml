services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: lending-borrowing-api-dev
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - postgres
    environment:
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${APP_DEBUG}
      LOG_LEVEL: ${LOG_LEVEL}
      SERVER_HOST: "0.0.0.0"  # Override for container
      SERVER_PORT: ${SERVER_PORT}
      
      # Database settings - use service name for host
      DB_HOST: postgres  # Override to use service name
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      DB_TIMEZONE: ${DB_TIMEZONE}
      
      # Blockchain settings - container specific
      BLOCKCHAIN_RPC_URL: http://host.docker.internal:8545
      BLOCKCHAIN_NETWORK: ${BLOCKCHAIN_NETWORK}
      BLOCKCHAIN_CHAIN_ID: ${BLOCKCHAIN_CHAIN_ID}
      BLOCKCHAIN_GAS_LIMIT: ${BLOCKCHAIN_GAS_LIMIT}
      BLOCKCHAIN_GAS_PRICE: ${BLOCKCHAIN_GAS_PRICE}
      
      # Other settings
      CONTRACT_ADDRESSES: ${CONTRACT_ADDRESSES}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: ${JWT_EXPIRE}
    volumes:
      - ./backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:16-alpine
    container_name: lending-borrowing-postgres-dev
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data-dev: