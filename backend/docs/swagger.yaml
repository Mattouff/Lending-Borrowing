basePath: /api/v1
definitions:
  dto.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.BorrowingInfoResponse:
    properties:
      currentInterestRate:
        type: string
      interestAccrued:
        type: string
      totalBorrowed:
        type: string
    type: object
  dto.CollateralInfoResponse:
    properties:
      collateralRatio:
        type: string
      isAtRisk:
        type: boolean
      maxBorrowable:
        type: string
      minCollateralRatio:
        type: string
      totalCollateral:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LendingInfoResponse:
    properties:
      currentInterestRate:
        type: string
      interestEarned:
        type: string
      totalDeposited:
        type: string
    type: object
  dto.LiquidatablePositionResponse:
    properties:
      borrowedAmount:
        type: string
      borrowedToken:
        type: string
      collateralAmount:
        type: string
      collateralToken:
        type: string
      healthFactor:
        type: string
      liquidationBonus:
        type: string
      positionId:
        type: integer
      userAddress:
        type: string
    type: object
  dto.LiquidatablePositionsResponse:
    properties:
      positions:
        items:
          $ref: '#/definitions/dto.LiquidatablePositionResponse'
        type: array
    type: object
  dto.MarketOverviewResponse:
    properties:
      activePositions:
        type: integer
      activeUsers:
        type: integer
      averageBorrowingAPY:
        type: string
      averageLendingAPY:
        type: string
      totalBorrowed:
        type: string
      totalValueLocked:
        type: string
    type: object
  dto.TokenMarketData:
    properties:
      availableLiquidity:
        type: string
      borrowingAPY:
        type: string
      collateralFactor:
        type: string
      lendingAPY:
        type: string
      token:
        $ref: '#/definitions/dto.TokenMetadata'
      totalBorrowed:
        type: string
      totalDeposited:
        type: string
      totalSupply:
        type: string
    type: object
  dto.TokenMetadata:
    properties:
      address:
        type: string
      decimals:
        type: integer
      logoURI:
        type: string
      name:
        type: string
      priceUSD:
        type: string
      symbol:
        type: string
    type: object
  dto.TokensMarketResponse:
    properties:
      tokens:
        items:
          $ref: '#/definitions/dto.TokenMarketData'
        type: array
    type: object
  dto.TransactionLiquidationRequest:
    properties:
      amount:
        type: string
      borrowerAddress:
        type: string
    required:
    - amount
    - borrowerAddress
    type: object
  dto.TransactionListResponse:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
    type: object
  dto.TransactionRequest:
    properties:
      amount:
        type: string
    required:
    - amount
    type: object
  dto.TransactionResponse:
    properties:
      amount:
        type: string
      blockNumber:
        type: integer
      createdAt:
        type: string
      gasPrice:
        type: string
      gasUsed:
        type: integer
      hash:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/dto.TransactionStatus'
      tokenAddress:
        type: string
      type:
        $ref: '#/definitions/dto.TransactionType'
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  dto.TransactionStatus:
    enum:
    - pending
    - confirmed
    - failed
    type: string
    x-enum-varnames:
    - TransactionStatusPending
    - TransactionStatusConfirmed
    - TransactionStatusFailed
  dto.TransactionType:
    enum:
    - deposit
    - withdraw
    - borrow
    - repay
    - liquidate
    type: string
    x-enum-varnames:
    - TransactionTypeDeposit
    - TransactionTypeWithdraw
    - TransactionTypeBorrow
    - TransactionTypeRepay
    - TransactionTypeLiquidate
  dto.UserAuthRequest:
    properties:
      address:
        type: string
      message:
        type: string
      signature:
        type: string
    required:
    - address
    - message
    - signature
    type: object
  dto.UserListResponse:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserRegistrationRequest:
    properties:
      address:
        type: string
      email:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - address
    - email
    - username
    type: object
  dto.UserResponse:
    properties:
      address:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      role:
        $ref: '#/definitions/dto.UserRole'
      updatedAt:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  dto.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleAdmin
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for decentralized lending and borrowing platform
  title: Lending & Borrowing Platform API
  version: "1.0"
paths:
  /borrowing/balance:
    get:
      consumes:
      - application/json
      description: Get the total amount borrowed by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get borrowed amount
      tags:
      - borrowing
  /borrowing/borrow:
    post:
      consumes:
      - application/json
      description: Borrow tokens against deposited collateral
      parameters:
      - description: Borrow amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Borrow tokens against collateral
      tags:
      - borrowing
  /borrowing/info:
    get:
      consumes:
      - application/json
      description: Get detailed information about user's borrowing including interest
        accrued
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BorrowingInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get borrowing information
      tags:
      - borrowing
  /borrowing/repay:
    post:
      consumes:
      - application/json
      description: Repay tokens previously borrowed from the protocol
      parameters:
      - description: Repay amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Repay borrowed tokens
      tags:
      - borrowing
  /borrowing/stats:
    get:
      consumes:
      - application/json
      description: Get global statistics about borrowing on the platform
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get borrowing statistics
      tags:
      - borrowing
  /borrowing/transactions:
    get:
      consumes:
      - application/json
      description: Get paginated history of user's borrowing transactions
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get borrowing transaction history
      tags:
      - borrowing
  /collateral/balance:
    get:
      consumes:
      - application/json
      description: Get user's current collateral balance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get collateral balance
      tags:
      - collateral
  /collateral/deposit:
    post:
      consumes:
      - application/json
      description: Deposit tokens as collateral to enable borrowing
      parameters:
      - description: Collateral amount to deposit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deposit collateral
      tags:
      - collateral
  /collateral/info:
    get:
      consumes:
      - application/json
      description: Get detailed information about user's collateral position
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollateralInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get collateral information
      tags:
      - collateral
  /collateral/withdraw:
    post:
      consumes:
      - application/json
      description: Withdraw deposited collateral if borrowing health factor permits
      parameters:
      - description: Collateral amount to withdraw
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Withdraw collateral
      tags:
      - collateral
  /lending/balance:
    get:
      consumes:
      - application/json
      description: Get user's current balance in the lending pool
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get lending balance
      tags:
      - lending
  /lending/deposit:
    post:
      consumes:
      - application/json
      description: Make a deposit into the lending pool to earn interest
      parameters:
      - description: Deposit amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deposit tokens to lending pool
      tags:
      - lending
  /lending/info:
    get:
      consumes:
      - application/json
      description: Get detailed lending information for the user including interest
        earned
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LendingInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get lending information
      tags:
      - lending
  /lending/pool-info:
    get:
      consumes:
      - application/json
      description: Get information about the lending pool including total deposited
        and interest rate
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get lending pool information
      tags:
      - lending
  /lending/transactions:
    get:
      consumes:
      - application/json
      description: Get paginated history of user's lending transactions
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get lending transaction history
      tags:
      - lending
  /lending/withdraw:
    post:
      consumes:
      - application/json
      description: Withdraw deposited tokens from the lending pool
      parameters:
      - description: Withdraw amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Withdraw tokens from lending pool
      tags:
      - lending
  /liquidation/bonus:
    get:
      consumes:
      - application/json
      description: Get current liquidation bonus percentage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get liquidation bonus
      tags:
      - liquidation
  /liquidation/history:
    get:
      consumes:
      - application/json
      description: Get paginated history of liquidation events
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get liquidation history
      tags:
      - liquidation
  /liquidation/liquidate:
    post:
      consumes:
      - application/json
      description: Liquidate a position that has fallen below minimum health factor
      parameters:
      - description: Liquidation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionLiquidationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Liquidate under-collateralized position
      tags:
      - liquidation
  /liquidation/positions:
    get:
      consumes:
      - application/json
      description: Get list of positions that can be liquidated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LiquidatablePositionsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get liquidatable positions
      tags:
      - liquidation
  /market/overview:
    get:
      consumes:
      - application/json
      description: Get overview of the market including TVL, borrowed amounts, and
        rates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MarketOverviewResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get market overview
      tags:
      - market
  /market/tokens:
    get:
      consumes:
      - application/json
      description: Get detailed market data for all supported tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokensMarketResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get tokens market data
      tags:
      - market
  /users/admin:
    get:
      consumes:
      - application/json
      description: Lists all users with pagination (admin only)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - admin
  /users/admin/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - admin
  /users/admin/{id}/verify:
    put:
      consumes:
      - application/json
      description: Marks a user as verified (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify user
      tags:
      - admin
  /users/admin/address/{address}:
    get:
      consumes:
      - application/json
      description: Retrieves a user by Ethereum address (admin only)
      parameters:
      - description: Ethereum address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by address
      tags:
      - admin
  /users/auth:
    post:
      consumes:
      - application/json
      description: Authenticate user with Ethereum signature
      parameters:
      - description: Authentication details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Authenticate with signature
      tags:
      - users
  /users/nonce/{address}:
    get:
      consumes:
      - application/json
      description: Gets a nonce message for the user to sign for authentication
      parameters:
      - description: Ethereum address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
              nonce:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get nonce message
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of the authenticated user
      parameters:
      - description: User profile update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with Ethereum address
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
